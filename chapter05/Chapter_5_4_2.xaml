<Window x:Class="WpfApp1.Chapter_5_4_2"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="Grid布局练习--部门留言板项目

        " Height="240" Width="400" MaxHeight="600" MaxWidth="800">

    <!-- 这是我自己做的版本
    使用Margin 在元素内部布局容容易导致内部结构写死，
    <Grid Margin="10" ShowGridLines="True">
        <Grid.RowDefinitions>
            <RowDefinition Height="25" />
            <RowDefinition Height="*" />
            <RowDefinition Height="25" />
        </Grid.RowDefinitions>
        <StackPanel Orientation="Horizontal" Grid.Row="0">
            <TextBlock Text="请选择您的部门并留言:" Width="auto" Height="25" />
            <ComboBox x:Name="部门名称"  Width="245">
                <ComboBoxItem Content="部门1" />
                <ComboBoxItem Content="部门1" />
                <ComboBoxItem Content="部门1" />
                <ComboBoxItem Content="部门1" />
                <ComboBoxItem Content="部门1" />
            </ComboBox>
        </StackPanel>
        <TextBox Grid.Row="1" Margin="0 4" BorderBrush="Black" BorderThickness="1">
            <TextBox.Text>
                <sys:String>这个文本框根据文件内容自动调整大小</sys:String>
            </TextBox.Text>
        </TextBox>
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right">

            <Button Content="提交" Width="80"  Margin="0 0 4 0" />
            <Button Content="清除" Width="80" />
        </StackPanel>
    </Grid>
    -->

    <!--这是教材版本-->
    <!--显然这种布局具有响应式的特性，在改变窗大小的时候，不会导致窗口内部元素变形-->

    <Grid Margin="10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" MinWidth="120" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="80" />
            <ColumnDefinition Width="4" />
            <ColumnDefinition Width="80" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="25" />
            <RowDefinition Height="4" />
            <RowDefinition Height="*" />
            <RowDefinition Height="4" />
            <RowDefinition Height="25" />
        </Grid.RowDefinitions>
        <TextBlock Text="请选择您的部门并留言:" Grid.Row="0" Grid.Column="0" VerticalAlignment="Center" />
        <ComboBox x:Name="部门名称" Grid.Column="1" Grid.Row="0" VerticalAlignment="Center" Grid.ColumnSpan="4">
            <ComboBoxItem Content="部门1" />
            <ComboBoxItem Content="部门2" />
            <ComboBoxItem Content="部门3" />
            <ComboBoxItem Content="部门4" />
            <ComboBoxItem Content="部门5" />
        </ComboBox>
        <TextBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="5" BorderBrush="Black" BorderThickness="1" Text="这个文本框根据文件内容自动调整大小">
        </TextBox>
        <Button Content="提交" Grid.Column="2" Grid.Row="4" />
        <Button Content="清除"  Grid.Column="4" Grid.Row="4" />
    </Grid>

    <!--这是教材里面的反面案例-->
    <!--大量在元素内部使用margin、对元素直接进行height、width属性硬编码来进行布局-->
    <!--
    <Grid>
        <TextBlock Text="请选择您的部门并留言："  Margin="10,10,0,0" Height="25" Width="140" VerticalAlignment="Top" HorizontalAlignment="Left" />
        <ComboBox Height="25" Width="210" VerticalAlignment="Top"  Margin="0,10,10,0"  HorizontalAlignment="Right" />
        <TextBox BorderBrush="Black" Margin="10,40,10,40" />
        <Button Content="提交" Height="25" Width="80" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="0,0,96,10" />
        <Button Content=" 清 除"  Height="25" Width="80" HorizontalAlignment="Right"  Margin="0,0,10,10" VerticalAlignment="Bottom" />
    </Grid>
    -->
</Window>